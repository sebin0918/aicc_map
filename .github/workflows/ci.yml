# GitHub Actions Workflow 설정
name: Docker Container CI/CD

# 트리거: main 브랜치에 push할 때 실행
on:
  push:
    branches: [main]

# 환경변수 설정
env:
  DOCKER_IMAGE_CLIENT: ghcr.io/${{ github.actor }}/client
  DOCKER_IMAGE_SERVER: ghcr.io/${{ github.actor }}/server
  DOCKER_IMAGE_DB: ghcr.io/${{ github.actor }}/db
  VERSION: ${{ github.sha }}
  EC2_PROJECT_PATH: /home/ec2-user/deploy

jobs:
  # 빌드 Job
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: Check out the repository
        uses: actions/checkout@v2

      # Docker Buildx 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 캐시 설정
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Docker 이미지 빌드 및 푸시 (client, server, db 각각에 대해)
      - name: Build and push Docker images
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ env.DOCKER_IMAGE_CLIENT }}:latest ./client
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ env.DOCKER_IMAGE_SERVER }}:latest ./server
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ env.DOCKER_IMAGE_DB }}:latest ./db

  # 배포 Job
  deploy:
    needs: build  # build Job 완료 후 실행
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # EC2 서버에 Docker Compose 파일 및 필요한 파일 전송
      - name: Deploy Docker Compose files to EC2
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "${{ env.EC2_PROJECT_PATH }}"

      # EC2 서버에 접속하여 Docker Compose 실행
      - name: SSH to EC2 and run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.EC2_PROJECT_PATH }}
            docker-compose down
            docker-compose pull
            docker-compose up -d
